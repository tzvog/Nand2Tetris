<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> Array </identifier>
				<identifier> a </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> length </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> i </identifier>
				<symbol> , </symbol>
				<identifier> ; </identifier>
				<identifier> length </identifier>
				<identifier> Keyboard </identifier>
				<identifier> readInt </identifier>
				<identifier> "HOW MANY NUMBERS? " </identifier>
				<identifier> ; </identifier>
				<identifier> a </identifier>
				<identifier> Array </identifier>
				<identifier> new </identifier>
				<identifier> length </identifier>
				<identifier> ; </identifier>
				<identifier> i </identifier>
				<identifier> 0 </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> i </identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier> length </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<Expression>
								<term>
									<identifier> i </identifier>
								</term>
							</Expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<Expression>
								<term>
									<identifier> Keyboard </identifier>
									<symbol> . </symbol>
									<identifier> readInt </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<Expression>
											<term>
												<stringConstant> "ENTER THE NEXT NUMBER: " </stringConstant>
											</term>
										</Expression>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</Expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<Expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</Expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> i </identifier>
					<symbol> = </symbol>
					<Expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> sum </identifier>
					<symbol> = </symbol>
					<Expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> i </identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier> length </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> sum </identifier>
							<symbol> = </symbol>
							<Expression>
								<term>
									<identifier> sum </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<Expression>
										<term>
											<identifier> i </identifier>
										</term>
									</Expression>
									<symbol> ] </symbol>
								</term>
							</Expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<Expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</Expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printString </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<Expression>
							<term>
								<stringConstant> "THE AVERAGE IS: " </stringConstant>
							</term>
						</Expression>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<Expression>
							<term>
								<identifier> sum </identifier>
							</term>
							<symbol> / </symbol>
							<term>
								<identifier> length </identifier>
							</term>
						</Expression>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> println </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
