<class>
	<keyword> class </keyword>
	<identifier> SquareGame </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Square </identifier>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> SquareGame </identifier>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> square </identifier>
					<symbol> = </symbol>
					<Expression>
						<term>
							<identifier> square </identifier>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> direction </identifier>
					<symbol> = </symbol>
					<Expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<Expression>
						<term>
							<identifier> square </identifier>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> square </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<Expression>
							<term>
								<identifier> square </identifier>
							</term>
						</Expression>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> moveSquare </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> square </identifier>
							<symbol> . </symbol>
							<identifier> moveUp </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<keyword> ; </keyword>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> square </identifier>
							<symbol> . </symbol>
							<identifier> moveDown </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<keyword> ; </keyword>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> square </identifier>
							<symbol> . </symbol>
							<identifier> moveLeft </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<keyword> ; </keyword>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> square </identifier>
							<symbol> . </symbol>
							<identifier> moveRight </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<keyword> ; </keyword>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Sys </identifier>
					<symbol> . </symbol>
					<identifier> wait </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<Expression>
							<term>
								<identifier> direction </identifier>
							</term>
						</Expression>
					</expressionList>
					<symbol> ) </symbol>
					<keyword> ; </keyword>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> run </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier> key </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier> exit </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> exit </identifier>
					<symbol> = </symbol>
					<Expression>
						<term>
							<identifier> key </identifier>
						</term>
					</Expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<Expression>
						<term>
							<identifier> exit </identifier>
						</term>
					</Expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> key </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> key </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> moveSquare </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<keyword> ; </keyword>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> exit </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> exit </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> square </identifier>
									<symbol> . </symbol>
									<identifier> decSize </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<keyword> ; </keyword>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> square </identifier>
									<symbol> . </symbol>
									<identifier> incSize </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<keyword> ; </keyword>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> direction </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> exit </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> direction </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> key </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> direction </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> square </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> direction </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> direction </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<Expression>
								<term>
									<identifier> key </identifier>
								</term>
							</Expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> key </identifier>
									<symbol> = </symbol>
									<Expression>
										<term>
											<identifier> key </identifier>
										</term>
									</Expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> moveSquare </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<keyword> ; </keyword>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
