// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array chars; 
	field int maxlen;
	field int len; 	

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	
		let maxlen = maxLength; 
		
		if(maxLength < 1)
		{
			let maxLength = 1;
		}
		
		let chars = Array.new(maxLength); 
		let len = 0;
		
		return this; 
    }

    /** Disposes this string. */
    method void dispose() {
	
		let len = 0;	
		return; 
    }

    /** Returns the current length of this string. */
    method int length() {
		return len; 
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return chars[j]; 
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	
		let chars[j] = c;
		return; 
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	
		if((len < maxlen))
		{
			let chars[len] = c; 
			let len = len + 1;
		}
	
		return this; 
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	
		if(len > 0)
		{ 
			let len = len - 1;
		}
		
		return; 
    }

	function boolean isDigit(char c){
        return (c > 47) & (c < 58);
    }
	
	function int chrtoint(char c)
	{
		return (c - 48); 
	}


    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	
		var int total; 
		var int counter; 
		var char tempchar; 
		var int tempint; 
		var int neg; 
		
		let neg = 1; 
		let counter = 0;
		let tempchar = charAt(0);  
		let total = 0; 
		
		if (~(String.isDigit(tempchar)))
		{
			if (~(tempchar = 45))
			{
				return total; 
			}
			else
			{
				let counter = counter + 1; 
				let neg = -1;
			}
		}
		
		while(counter < len)
		{
		
			if (~(String.isDigit(charAt(counter))))
			{
				return (total * neg);
			}
			
			let total = (total * 10) + String.chrtoint(charAt(counter));
			let counter = counter + 1; 
		}
		
		return (total * neg); 
    }

	function char intToChar(int x)
	{
		return x + 48; 
	}
	
	method void setinthelp(int val)
	{
		var char charval; 
		var int modulehelp;

			if(val < 10)
			{
				let charval = String.intToChar(val);
				do appendChar(charval);
			}
			else
			{
				let modulehelp = val / 10;
				do setinthelp(modulehelp);
				
				let charval = String.intToChar(val - (modulehelp * 10)); 
				do appendChar(charval); 
			}

			return;
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	
		let len = 0;
	
		if (val < 0)
		{		
			let val = -val;
			do appendChar(45);
		}
		
		do setinthelp(val);
		
		return; 
		
    }
	
    /** Returns the new line character. */
    function char newLine() {
		return 128; 
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
