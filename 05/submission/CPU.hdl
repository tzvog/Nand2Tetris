// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // calculates if we should take the input from ALU or instruction 
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegisterInput);
    
    // calculates if we are dealing with a C or A istruction 
    Not(in = instruction[15], out = AInstruction);

    // if we are dealing with an A instruction or the C instruction 
    // wants us to store the value in a
    Or(a = AInstruction, b = instruction[5], out = ALoad);

    // gives a value to the A register 
    ARegister(in = ARegisterInput, load = ALoad, out = ARegisterOut, out[0..14] = addressM);

    // what should be calculated by the ALU the value from the M register or D register  
    Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = ALUInput);

    // checks if we need a the value to be reloaded into the D register and a C instruction 
    And(a = instruction[4], b = instruction[15], out = DLoad);
    DRegister(in = ALUOut, load = DLoad, out = DRegisterOut);

    // gives the ALU the instrucion to complete 
    ALU(x = DRegisterOut, y = ALUInput, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUOut, out = outM, zr = zr, ng = ng);
	
    // calculates if the value was stored either in A or D register and it was a C instruction therefore it needs to be written to next time
    And(a = instruction[15], b = instruction[3], out = writeM);

    // calculates what should be put into the pc bit 
    Or(a = ng, b = zr, out = ngOrzr);
    Not(in = ngOrzr, out = pos);
    And(a = pos, b = instruction[0], out = GT);
    And(a = zr, b = instruction[1], out = EQ);
    And(a = ng, b = instruction[2], out = LT);
    Or(a = GT, b = EQ, out = GE);
    Or(a = GE, b = LT, out = GEL);
    And(a = GEL, b = instruction[15], out = PCLoad);
	
    // fils the value into the pc register 
    PC(in = ARegisterOut, load = PCLoad, inc = true, reset = reset, out[0..14] = pc);
}