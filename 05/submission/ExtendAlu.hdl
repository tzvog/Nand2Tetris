/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
        // do the shifts and find the relevant one
        ShiftRight(in=x, out=xShiftRight);
        ShiftLeft(in=x, out=xShiftLeft);
        ShiftRight(in=y, out=yShiftRight);
        ShiftLeft(in=y, out=yShiftLeft);
        Mux4Way16(a=yShiftRight, b=xShiftRight, c=yShiftLeft, d=xShiftLeft, sel=instruction[4..5], out=shiftOut);

        // claculate the ALU and the multipication of x and y
        ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUout, zr=ALUzr, ng=ALUng);
        Mul(a=x, b=y, out=xMuly);

        // return the relevant output
        Mux4Way16(a=xMuly, b=shiftOut, c=xMuly, d=ALUout, sel=instruction[7..8], out=out, out[0..7] = Rightoutput, out[8..15] = Leftoutput, out[15] = lastoutput);

        // check if output is 0
        Or8Way(in=Rightoutput, out=right);
        Or8Way(in=Leftoutput, out=left);
        Or(a=right, b=left, out=nzr);
        Not(in=nzr, out=zr);

        // check if output is negative
        And(a=lastoutput, b=true, out=ng);
}
