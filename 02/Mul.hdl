CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    PARTS:
	Mux16(a = false, b = a, sel = b[0], out = m0);
	Add16(a = m0, b = false, out = sum0);
	ShiftLeft(in = a, out = a1);
	
	Mux16(a = false, b = a1, sel = b[1], out = m1);
	Add16(a = m1, b = sum0, out = sum1);
	ShiftLeft(in = a1, out = a2);
	
	Mux16(a = false, b = a2, sel = b[2], out = m2);
	Add16(a = m2, b = sum1, out = sum2);
	ShiftLeft(in = a2, out = a3);
	
	Mux16(a = false, b = a3, sel = b[3], out = m3);
	Add16(a = m3, b = sum2, out = sum3);
	ShiftLeft(in = a3, out = a4);
	
	Mux16(a = false, b = a4, sel = b[4], out = m4);
	Add16(a = m4, b = sum3, out = sum4);
	ShiftLeft(in = a4, out = a5);
	
	Mux16(a = false, b = a5, sel = b[5], out = m5);
	Add16(a = m5, b = sum4, out = sum5);
	ShiftLeft(in = a5, out = a6);
	
	Mux16(a = false, b = a6, sel = b[6], out = m6);
	Add16(a = m6, b = sum5, out = sum6);
	ShiftLeft(in = a6, out = a7);
	
	Mux16(a = false, b = a7, sel = b[7], out = m7);
	Add16(a = m7, b = sum6, out = sum7);
	ShiftLeft(in = a7, out = a8);
	
	Mux16(a = false, b = a8, sel = b[8], out = m8);
	Add16(a = m8, b = sum7, out = sum8);
	ShiftLeft(in = a8, out = a9);
	
	Mux16(a = false, b = a9, sel = b[9], out = m9);
	Add16(a = m9, b = sum8, out = sum9);
	ShiftLeft(in = a9, out = a10);
	
	Mux16(a = false, b = a10, sel = b[10], out = m10);
	Add16(a = m10, b = sum9, out = sum10);
	ShiftLeft(in = a10, out = a11);
	
	Mux16(a = false, b = a11, sel = b[11], out = m11);
	Add16(a = m11, b = sum10, out = sum11);
	ShiftLeft(in = a11, out = a12);
	
	Mux16(a = false, b = a12, sel = b[12], out = m12);
	Add16(a = m12, b = sum11, out = sum12);
	ShiftLeft(in = a12, out = a13);
	
	Mux16(a = false, b = a13, sel = b[13], out = m13);
	Add16(a = m13, b = sum12, out = sum13);
	ShiftLeft(in = a13, out = a14);
	
	Mux16(a = false, b = a14, sel = b[14], out = m14);
	Add16(a = m14, b = sum13, out = sum14);
	ShiftLeft(in = a14, out = a15);
	
	Mux16(a = false, b = a15, sel = b[15], out = m15);
	Add16(a = m15, b = sum14, out[0..7]=firstHalf, out[8..15]=secondHalf, out[15]=sign, out = res1);
	
	// check if the output has the right sign
	Xor(a=a[15], b=b[15], out=neg);
	Xor(a=neg, b=sign, out=adjNeg);

	// check that the output is not zero
	Or8Way(in=firstHalf, out=zero1);
	Or8Way(in=secondHalf, out=zero2);
	And(a=zero1, b=zero2, out=isZero);
	And(a=adjNeg, b=isZero, out=adj);

	// return adjusted result
	Add16(a=res1, b[0..14]=false, b[15]=adj, out=out);
}